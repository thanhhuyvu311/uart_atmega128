
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000036c  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f81  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000969  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000748  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055d  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b9  00000000  00000000  00002bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000030a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e3       	ldi	r26, 0x32	; 50
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 33       	cpi	r26, 0x32	; 50
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f8 d0       	rcall	.+496    	; 0x2b4 <main>
  c4:	51 c1       	rjmp	.+674    	; 0x368 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Read2Nib>:
  va_start(args, format);
  vsnprintf(lcd_buffer, LCD_NO_COLS + 1, format, args);
  va_end(args);

  putStr_LCD(lcd_buffer);
}
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	80 6f       	ori	r24, 0xF0	; 240
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	8a b3       	in	r24, 0x1a	; 26
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	99 b3       	in	r25, 0x19	; 25
  e2:	90 7f       	andi	r25, 0xF0	; 240
  e4:	8b b3       	in	r24, 0x1b	; 27
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	89 b3       	in	r24, 0x19	; 25
  f8:	2b b3       	in	r18, 0x1b	; 27
  fa:	2b 7f       	andi	r18, 0xFB	; 251
  fc:	2b bb       	out	0x1b, r18	; 27
  fe:	82 95       	swap	r24
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	89 2b       	or	r24, r25
 104:	08 95       	ret

00000106 <Write2Nib>:
 106:	2b b3       	in	r18, 0x1b	; 27
 108:	2f 70       	andi	r18, 0x0F	; 15
 10a:	38 2f       	mov	r19, r24
 10c:	30 7f       	andi	r19, 0xF0	; 240
 10e:	40 e1       	ldi	r20, 0x10	; 16
 110:	84 9f       	mul	r24, r20
 112:	c0 01       	movw	r24, r0
 114:	11 24       	eor	r1, r1
 116:	92 2f       	mov	r25, r18
 118:	93 2b       	or	r25, r19
 11a:	9b bb       	out	0x1b, r25	; 27
 11c:	9b b3       	in	r25, 0x1b	; 27
 11e:	94 60       	ori	r25, 0x04	; 4
 120:	9b bb       	out	0x1b, r25	; 27
 122:	9b b3       	in	r25, 0x1b	; 27
 124:	9b 7f       	andi	r25, 0xFB	; 251
 126:	9b bb       	out	0x1b, r25	; 27
 128:	82 2b       	or	r24, r18
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	8b b3       	in	r24, 0x1b	; 27
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	8b bb       	out	0x1b, r24	; 27
 132:	8b b3       	in	r24, 0x1b	; 27
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	8b bb       	out	0x1b, r24	; 27
 138:	08 95       	ret

0000013a <wait_LCD>:
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	8b b3       	in	r24, 0x1b	; 27
 146:	8e 7f       	andi	r24, 0xFE	; 254
 148:	8b bb       	out	0x1b, r24	; 27
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	8b bb       	out	0x1b, r24	; 27
 150:	bb df       	rcall	.-138    	; 0xc8 <Read2Nib>
 152:	89 83       	std	Y+1, r24	; 0x01
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	88 23       	and	r24, r24
 158:	ac f3       	brlt	.-22     	; 0x144 <wait_LCD+0xa>
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	8b bb       	out	0x1b, r24	; 27
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	8a bb       	out	0x1a, r24	; 26
 164:	0f 90       	pop	r0
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <init_LCD>:
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	8a bb       	out	0x1a, r24	; 26
 170:	8a bb       	out	0x1a, r24	; 26
 172:	8b b3       	in	r24, 0x1b	; 27
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	8b bb       	out	0x1b, r24	; 27
 178:	8b b3       	in	r24, 0x1b	; 27
 17a:	8d 7f       	andi	r24, 0xFD	; 253
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	8b 7f       	andi	r24, 0xFB	; 251
 182:	8b bb       	out	0x1b, r24	; 27
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	84 60       	ori	r24, 0x04	; 4
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	8b b3       	in	r24, 0x1b	; 27
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	8b bb       	out	0x1b, r24	; 27
 190:	8b b3       	in	r24, 0x1b	; 27
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	8b bb       	out	0x1b, r24	; 27
 196:	d1 df       	rcall	.-94     	; 0x13a <wait_LCD>
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	b5 df       	rcall	.-150    	; 0x106 <Write2Nib>
 19c:	ce df       	rcall	.-100    	; 0x13a <wait_LCD>
 19e:	8b b3       	in	r24, 0x1b	; 27
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	af df       	rcall	.-162    	; 0x106 <Write2Nib>
 1a8:	c8 df       	rcall	.-112    	; 0x13a <wait_LCD>
 1aa:	8b b3       	in	r24, 0x1b	; 27
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	8b bb       	out	0x1b, r24	; 27
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	a9 df       	rcall	.-174    	; 0x106 <Write2Nib>
 1b4:	c2 cf       	rjmp	.-124    	; 0x13a <wait_LCD>
 1b6:	08 95       	ret

000001b8 <move_LCD>:
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	31 09       	sbc	r19, r1
 1c0:	86 2f       	mov	r24, r22
 1c2:	90 e4       	ldi	r25, 0x40	; 64
 1c4:	29 9f       	mul	r18, r25
 1c6:	80 0d       	add	r24, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	9b b3       	in	r25, 0x1b	; 27
 1cc:	9e 7f       	andi	r25, 0xFE	; 254
 1ce:	9b bb       	out	0x1b, r25	; 27
 1d0:	81 58       	subi	r24, 0x81	; 129
 1d2:	99 df       	rcall	.-206    	; 0x106 <Write2Nib>
 1d4:	b2 cf       	rjmp	.-156    	; 0x13a <wait_LCD>
 1d6:	08 95       	ret

000001d8 <clr_LCD>:
 1d8:	8b b3       	in	r24, 0x1b	; 27
 1da:	8e 7f       	andi	r24, 0xFE	; 254
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	92 df       	rcall	.-220    	; 0x106 <Write2Nib>
 1e2:	ab cf       	rjmp	.-170    	; 0x13a <wait_LCD>
 1e4:	08 95       	ret

000001e6 <putChar_LCD>:
 1e6:	9b b3       	in	r25, 0x1b	; 27
 1e8:	91 60       	ori	r25, 0x01	; 1
 1ea:	9b bb       	out	0x1b, r25	; 27
 1ec:	8c df       	rcall	.-232    	; 0x106 <Write2Nib>
 1ee:	a5 cf       	rjmp	.-182    	; 0x13a <wait_LCD>
 1f0:	08 95       	ret

000001f2 <putStr_LCD>:
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	8c 01       	movw	r16, r24
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <putStr_LCD+0x10>
 1fe:	f3 df       	rcall	.-26     	; 0x1e6 <putChar_LCD>
 200:	cf 5f       	subi	r28, 0xFF	; 255
 202:	f8 01       	movw	r30, r16
 204:	ec 0f       	add	r30, r28
 206:	f1 1d       	adc	r31, r1
 208:	80 81       	ld	r24, Z
 20a:	81 11       	cpse	r24, r1
 20c:	f8 cf       	rjmp	.-16     	; 0x1fe <putStr_LCD+0xc>
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <uart_tx>:

//thanh ghi ucsrnA dung de dieu khien hoat dong cua module thanh usart 
void uart_tx(unsigned char chr){
	//check var xem udre1 co bang 1 khong,
	//neu bang 1 thi ucsr1 moi cho truyen
	while(bit_is_clear(UCSR0A,UDRE0)){};
 216:	5d 9b       	sbis	0x0b, 5	; 11
 218:	fe cf       	rjmp	.-4      	; 0x216 <uart_tx>
		UDR0 = chr;
 21a:	8c b9       	out	0x0c, r24	; 12
 21c:	08 95       	ret

0000021e <checkpad>:
}	
uint8_t checkpad() {
	uint8_t i, j, keyin;
	for (i = 0; i < 4; i++) {
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	30 c0       	rjmp	.+96     	; 0x282 <checkpad+0x64>
		KEYPAD_PORT = 0xFF - (1 << (i + 4));
 222:	65 2f       	mov	r22, r21
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	9b 01       	movw	r18, r22
 228:	2c 5f       	subi	r18, 0xFC	; 252
 22a:	3f 4f       	sbci	r19, 0xFF	; 255
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <checkpad+0x18>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	2a 95       	dec	r18
 238:	e2 f7       	brpl	.-8      	; 0x232 <checkpad+0x14>
 23a:	80 95       	com	r24
 23c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	88 e1       	ldi	r24, 0x18	; 24
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <checkpad+0x22>
 244:	00 c0       	rjmp	.+0      	; 0x246 <checkpad+0x28>
		_delay_us(10);
		keyin = KEYPAD_PIN & 0x0F;
 246:	93 b3       	in	r25, 0x13	; 19
 248:	9f 70       	andi	r25, 0x0F	; 15
		if (keyin != 0x0F) {
 24a:	9f 30       	cpi	r25, 0x0F	; 15
 24c:	b1 f4       	brne	.+44     	; 0x27a <checkpad+0x5c>
 24e:	18 c0       	rjmp	.+48     	; 0x280 <checkpad+0x62>
			for (j = 0; j < 4; j++) {
				if (keyin == scan_code[j]) {
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	f9 01       	movw	r30, r18
 256:	e0 5f       	subi	r30, 0xF0	; 240
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	40 81       	ld	r20, Z
 25c:	94 13       	cpse	r25, r20
 25e:	0b c0       	rjmp	.+22     	; 0x276 <checkpad+0x58>
					return ascii_code[j][i];
 260:	22 0f       	add	r18, r18
 262:	33 1f       	adc	r19, r19
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	20 50       	subi	r18, 0x00	; 0
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	f9 01       	movw	r30, r18
 26e:	e6 0f       	add	r30, r22
 270:	f7 1f       	adc	r31, r23
 272:	80 81       	ld	r24, Z
 274:	08 95       	ret
	for (i = 0; i < 4; i++) {
		KEYPAD_PORT = 0xFF - (1 << (i + 4));
		_delay_us(10);
		keyin = KEYPAD_PIN & 0x0F;
		if (keyin != 0x0F) {
			for (j = 0; j < 4; j++) {
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	01 c0       	rjmp	.+2      	; 0x27c <checkpad+0x5e>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	84 30       	cpi	r24, 0x04	; 4
 27e:	40 f3       	brcs	.-48     	; 0x250 <checkpad+0x32>
	while(bit_is_clear(UCSR0A,UDRE0)){};
		UDR0 = chr;
}	
uint8_t checkpad() {
	uint8_t i, j, keyin;
	for (i = 0; i < 4; i++) {
 280:	5f 5f       	subi	r21, 0xFF	; 255
 282:	54 30       	cpi	r21, 0x04	; 4
 284:	70 f2       	brcs	.-100    	; 0x222 <checkpad+0x4>
					return ascii_code[j][i];
				}
			}
		}
	}
	return 0;
 286:	80 e0       	ldi	r24, 0x00	; 0
}
 288:	08 95       	ret

0000028a <eeprom_write>:

//cau hinh eeprom

void eeprom_write(unsigned int address, uint8_t data){
	while(bit_is_set(EECR,EEWE)){};
 28a:	e1 99       	sbic	0x1c, 1	; 28
 28c:	fe cf       	rjmp	.-4      	; 0x28a <eeprom_write>
	EEAR = address;
 28e:	9f bb       	out	0x1f, r25	; 31
 290:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
 292:	6d bb       	out	0x1d, r22	; 29
	EECR|=(1<<EEMWE);
 294:	8c b3       	in	r24, 0x1c	; 28
 296:	84 60       	ori	r24, 0x04	; 4
 298:	8c bb       	out	0x1c, r24	; 28
	EECR|=(1<<EEWE);
 29a:	8c b3       	in	r24, 0x1c	; 28
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	8c bb       	out	0x1c, r24	; 28
 2a0:	08 95       	ret

000002a2 <eeprom_read>:
}

unsigned char eeprom_read(unsigned int address){
	while(bit_is_set(EECR,EEWE)){};
 2a2:	e1 99       	sbic	0x1c, 1	; 28
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <eeprom_read>
	EEAR = address;
 2a6:	9f bb       	out	0x1f, r25	; 31
 2a8:	8e bb       	out	0x1e, r24	; 30
	EECR |=(1<<EERE);
 2aa:	8c b3       	in	r24, 0x1c	; 28
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 2b0:	8d b3       	in	r24, 0x1d	; 29
}
 2b2:	08 95       	ret

000002b4 <main>:

int main(void)
{
    /* Replace with your application code */
	//baud 115200, tan so f=8MHz
	UBRR0H = 0;
 2b4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 47;
 2b8:	8f e2       	ldi	r24, 0x2F	; 47
 2ba:	89 b9       	out	0x09, r24	; 9
	// Nut nhan PB
	DDRB &=~(1<<PB5);
 2bc:	87 b3       	in	r24, 0x17	; 23
 2be:	8f 7d       	andi	r24, 0xDF	; 223
 2c0:	87 bb       	out	0x17, r24	; 23
	//dien tro keo len
	PORTB |= (1<<PB5);
 2c2:	88 b3       	in	r24, 0x18	; 24
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	88 bb       	out	0x18, r24	; 24
	//??t thanh ghi ucsr1a tat ca bit = 0
	//dieu nay phuc vu cho viec kiem tra bit thu 5 ( UDREn ) 
	UCSR0A=0x00;
 2c8:	1b b8       	out	0x0b, r1	; 11
	//ucsrB la thanh ghi trang thai va dieu khien usart
	
	UCSR0B |=(1<<TXEN0); //cho phep truyen
 2ca:	8a b1       	in	r24, 0x0a	; 10
 2cc:	88 60       	ori	r24, 0x08	; 8
 2ce:	8a b9       	out	0x0a, r24	; 10
	
	//ucsrC thanh ghi chu yeu quy dinh khung truyen va che do truyen
	
	//chon data 8 bit
	// ucszn2 = 0, ucszn1= 11, ucszn0 = 10 => 8 bit truyen
	UCSR0C |=(1<<UCSZ11)|(1<<UCSZ10);
 2d0:	e5 e9       	ldi	r30, 0x95	; 149
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	86 60       	ori	r24, 0x06	; 6
 2d8:	80 83       	st	Z, r24

	
	//cau hinh keypad
	KEYPAD_DDR = 0xF0; // PF4-PF7 output, PF0-PF3 input
 2da:	80 ef       	ldi	r24, 0xF0	; 240
 2dc:	84 bb       	out	0x14, r24	; 20
	KEYPAD_PORT = 0x0F; // Pull-up cho PF0-PF3
 2de:	8f e0       	ldi	r24, 0x0F	; 15
 2e0:	85 bb       	out	0x15, r24	; 21
	
	init_LCD();
 2e2:	44 df       	rcall	.-376    	; 0x16c <init_LCD>
	clr_LCD();
 2e4:	79 df       	rcall	.-270    	; 0x1d8 <clr_LCD>
	int i = 0;

	uint8_t key;
	uint8_t saved_keypad_value = 0;
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t eeprom_data;
	char none_char = '\0'; 
	while (1)
	{
		key = checkpad();
 2e8:	9a df       	rcall	.-204    	; 0x21e <checkpad>
 2ea:	c8 2f       	mov	r28, r24
		move_LCD(1,1);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	63 df       	rcall	.-314    	; 0x1b8 <move_LCD>
 2f2:	cc 23       	and	r28, r28
		///
		if(key)
 2f4:	c9 f3       	breq	.-14     	; 0x2e8 <main+0x34>
 2f6:	ce 34       	cpi	r28, 0x4E	; 78
		{
			if(key == 'N'){
 2f8:	79 f4       	brne	.+30     	; 0x318 <main+0x64>
 2fa:	86 ef       	ldi	r24, 0xF6	; 246
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x48>
				_delay_us(100);
				if (key == 'N')
 300:	ce 34       	cpi	r28, 0x4E	; 78
 302:	91 f7       	brne	.-28     	; 0x2e8 <main+0x34>
				{
					clr_LCD();
 304:	69 df       	rcall	.-302    	; 0x1d8 <clr_LCD>
					eeprom_write(i,none_char);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
					eeprom_data = eeprom_read(i);
 30c:	be df       	rcall	.-132    	; 0x28a <eeprom_write>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	c7 df       	rcall	.-114    	; 0x2a2 <eeprom_read>
					uart_tx(eeprom_data);
 314:	80 df       	rcall	.-256    	; 0x216 <uart_tx>
 316:	e8 cf       	rjmp	.-48     	; 0x2e8 <main+0x34>
 318:	cd 33       	cpi	r28, 0x3D	; 61
				}
				
			}else if (key == '=')
 31a:	69 f4       	brne	.+26     	; 0x336 <main+0x82>
 31c:	86 ef       	ldi	r24, 0xF6	; 246
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0x6a>
			{
				_delay_us(100);
				if (key == '=')
 322:	cd 33       	cpi	r28, 0x3D	; 61
				{	
					putStr_LCD("thuc hien lenh!");
 324:	09 f7       	brne	.-62     	; 0x2e8 <main+0x34>
 326:	84 e1       	ldi	r24, 0x14	; 20
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	63 df       	rcall	.-314    	; 0x1f2 <putStr_LCD>
					eeprom_write(i,saved_keypad_value);
 32c:	6d 2f       	mov	r22, r29
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ab df       	rcall	.-170    	; 0x28a <eeprom_write>
 334:	d9 cf       	rjmp	.-78     	; 0x2e8 <main+0x34>
					
					
				}
			}
			else if (key == 'D')
 336:	c4 34       	cpi	r28, 0x44	; 68
 338:	99 f4       	brne	.+38     	; 0x360 <main+0xac>
 33a:	86 ef       	ldi	r24, 0xF6	; 246
 33c:	8a 95       	dec	r24
			{
				_delay_us(100);
				move_LCD(2,1);
 33e:	f1 f7       	brne	.-4      	; 0x33c <main+0x88>
 340:	61 e0       	ldi	r22, 0x01	; 1
				if (key == 'D')
 342:	82 e0       	ldi	r24, 0x02	; 2
				{	
					putStr_LCD("Chuyen lenh: ");
 344:	39 df       	rcall	.-398    	; 0x1b8 <move_LCD>
 346:	c4 34       	cpi	r28, 0x44	; 68
 348:	79 f6       	brne	.-98     	; 0x2e8 <main+0x34>
					eeprom_data = eeprom_read(i);
 34a:	84 e2       	ldi	r24, 0x24	; 36
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	51 df       	rcall	.-350    	; 0x1f2 <putStr_LCD>
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
					putChar_LCD(eeprom_data);
 354:	a6 df       	rcall	.-180    	; 0x2a2 <eeprom_read>
 356:	c8 2f       	mov	r28, r24
					uart_tx(eeprom_data);
 358:	46 df       	rcall	.-372    	; 0x1e6 <putChar_LCD>
 35a:	8c 2f       	mov	r24, r28
 35c:	5c df       	rcall	.-328    	; 0x216 <uart_tx>
 35e:	c4 cf       	rjmp	.-120    	; 0x2e8 <main+0x34>
				}
			}
			else{
				saved_keypad_value = key;
				putChar_LCD(saved_keypad_value);
 360:	8c 2f       	mov	r24, r28
 362:	41 df       	rcall	.-382    	; 0x1e6 <putChar_LCD>
 364:	dc 2f       	mov	r29, r28
					putChar_LCD(eeprom_data);
					uart_tx(eeprom_data);
				}
			}
			else{
				saved_keypad_value = key;
 366:	c0 cf       	rjmp	.-128    	; 0x2e8 <main+0x34>

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
