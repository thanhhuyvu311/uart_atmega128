
salve.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000853  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007af  00000000  00000000  00000a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  0000124e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bb  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	7a c0       	rjmp	.+244    	; 0x12e <__vector_14>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__vector_18>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	5e c0       	rjmp	.+188    	; 0x158 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
    /* Replace with your application code */
	
	
	
	//cau hinh uart1
	UBRR0H = 0;
  9e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 47;
  a2:	8f e2       	ldi	r24, 0x2F	; 47
  a4:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = 0x00;
  a6:	1b b8       	out	0x0b, r1	; 11
	
	//cho phep nhan du lieu, truyen du lieu va ngat khi nhan xong 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
  a8:	88 e9       	ldi	r24, 0x98	; 152
  aa:	8a b9       	out	0x0a, r24	; 10
	
	// set truyen 8 bit
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	// C?u hình chân PB6,PB7 là OUTPUT ?? ?i?u khi?n LED,buzzer
	DDRB |= (1<<PB6)|(1<<PB7);
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	80 6c       	ori	r24, 0xC0	; 192
  b6:	87 bb       	out	0x17, r24	; 23
	sei(); // cho phep ngat toan cuc
  b8:	78 94       	sei
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x1c>

000000bc <__vector_18>:
    {
    }
}

// Interrupt Service Routine for UART1 receive
ISR(USART0_RX_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
	unsigned char u_data = UDR0; // Read received data
  ca:	8c b1       	in	r24, 0x0c	; 12
	if (u_data == '0') {
  cc:	80 33       	cpi	r24, 0x30	; 48
  ce:	69 f4       	brne	.+26     	; 0xea <__vector_18+0x2e>
		PORTB |= (1<<PB6); // B?t LED
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	88 bb       	out	0x18, r24	; 24
		TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // Stop Timer1 (clear prescaler)
  d6:	8e b5       	in	r24, 0x2e	; 46
  d8:	88 7f       	andi	r24, 0xF8	; 248
  da:	8e bd       	out	0x2e, r24	; 46
		TIMSK &=~(1<<TOIE1);
  dc:	87 b7       	in	r24, 0x37	; 55
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	87 bf       	out	0x37, r24	; 55
		PORTB &=~(1<<PB7);
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	8f 77       	andi	r24, 0x7F	; 127
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	1b c0       	rjmp	.+54     	; 0x120 <__vector_18+0x64>
		} else if (u_data == '1' || u_data == '\0') { // Thêm ?i?u ki?n cho '0' ?? t?t LED
  ea:	81 33       	cpi	r24, 0x31	; 49
  ec:	11 f0       	breq	.+4      	; 0xf2 <__vector_18+0x36>
  ee:	81 11       	cpse	r24, r1
  f0:	0d c0       	rjmp	.+26     	; 0x10c <__vector_18+0x50>
		PORTB &= ~(1<<PB6); // T?t LED
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	8f 7b       	andi	r24, 0xBF	; 191
  f6:	88 bb       	out	0x18, r24	; 24
		TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // Stop Timer1 (clear prescaler)
  f8:	8e b5       	in	r24, 0x2e	; 46
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	8e bd       	out	0x2e, r24	; 46
		TIMSK &=~(1<<TOIE1);
  fe:	87 b7       	in	r24, 0x37	; 55
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	87 bf       	out	0x37, r24	; 55
		PORTB &=~(1<<PB7);
 104:	88 b3       	in	r24, 0x18	; 24
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	88 bb       	out	0x18, r24	; 24
 10a:	0a c0       	rjmp	.+20     	; 0x120 <__vector_18+0x64>
	}else{
		//SU DUNG TIMER  THANH 16BIT
		TCCR1B |=(1<<CS12)|(1<<CS10); //chia t?n 1024
 10c:	8e b5       	in	r24, 0x2e	; 46
 10e:	85 60       	ori	r24, 0x05	; 5
 110:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0xC7C0;
 112:	80 ec       	ldi	r24, 0xC0	; 192
 114:	97 ec       	ldi	r25, 0xC7	; 199
 116:	9d bd       	out	0x2d, r25	; 45
 118:	8c bd       	out	0x2c, r24	; 44
		TIMSK |=(1<<TOIE1); // cho phép ng?t tràn.
 11a:	87 b7       	in	r24, 0x37	; 55
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	87 bf       	out	0x37, r24	; 55
	}
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_14>:
ISR(TIMER1_OVF_vect){
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
	TCNT1 = 0xC7C;
 13c:	8c e7       	ldi	r24, 0x7C	; 124
 13e:	9c e0       	ldi	r25, 0x0C	; 12
 140:	9d bd       	out	0x2d, r25	; 45
 142:	8c bd       	out	0x2c, r24	; 44
	PORTB ^= 128; // 1000 000
 144:	88 b3       	in	r24, 0x18	; 24
 146:	80 58       	subi	r24, 0x80	; 128
 148:	88 bb       	out	0x18, r24	; 24
}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
