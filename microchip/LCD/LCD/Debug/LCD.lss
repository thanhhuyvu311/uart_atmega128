
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8b  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090e  00000000  00000000  00000fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000596  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e1  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000299  00000000  00000000  0000243d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000026d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	81 d0       	rcall	.+258    	; 0x1ac <main>
  aa:	9f c0       	rjmp	.+318    	; 0x1ea <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Read2Nib>:
  va_start(args, format);
  vsnprintf(lcd_buffer, LCD_NO_COLS + 1, format, args);
  va_end(args);

  putStr_LCD(lcd_buffer);
}
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	80 6f       	ori	r24, 0xF0	; 240
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	8a b3       	in	r24, 0x1a	; 26
  b6:	8f 70       	andi	r24, 0x0F	; 15
  b8:	8a bb       	out	0x1a, r24	; 26
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	8b b3       	in	r24, 0x1b	; 27
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	8b bb       	out	0x1b, r24	; 27
  c6:	99 b3       	in	r25, 0x19	; 25
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	89 b3       	in	r24, 0x19	; 25
  de:	2b b3       	in	r18, 0x1b	; 27
  e0:	2b 7f       	andi	r18, 0xFB	; 251
  e2:	2b bb       	out	0x1b, r18	; 27
  e4:	82 95       	swap	r24
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	89 2b       	or	r24, r25
  ea:	08 95       	ret

000000ec <Write2Nib>:
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	2f 70       	andi	r18, 0x0F	; 15
  f0:	38 2f       	mov	r19, r24
  f2:	30 7f       	andi	r19, 0xF0	; 240
  f4:	40 e1       	ldi	r20, 0x10	; 16
  f6:	84 9f       	mul	r24, r20
  f8:	c0 01       	movw	r24, r0
  fa:	11 24       	eor	r1, r1
  fc:	92 2f       	mov	r25, r18
  fe:	93 2b       	or	r25, r19
 100:	9b bb       	out	0x1b, r25	; 27
 102:	9b b3       	in	r25, 0x1b	; 27
 104:	94 60       	ori	r25, 0x04	; 4
 106:	9b bb       	out	0x1b, r25	; 27
 108:	9b b3       	in	r25, 0x1b	; 27
 10a:	9b 7f       	andi	r25, 0xFB	; 251
 10c:	9b bb       	out	0x1b, r25	; 27
 10e:	82 2b       	or	r24, r18
 110:	8b bb       	out	0x1b, r24	; 27
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	84 60       	ori	r24, 0x04	; 4
 116:	8b bb       	out	0x1b, r24	; 27
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	08 95       	ret

00000120 <wait_LCD>:
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	1f 92       	push	r1
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	8b bb       	out	0x1b, r24	; 27
 130:	8b b3       	in	r24, 0x1b	; 27
 132:	82 60       	ori	r24, 0x02	; 2
 134:	8b bb       	out	0x1b, r24	; 27
 136:	bb df       	rcall	.-138    	; 0xae <Read2Nib>
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	88 23       	and	r24, r24
 13e:	ac f3       	brlt	.-22     	; 0x12a <wait_LCD+0xa>
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	8d 7f       	andi	r24, 0xFD	; 253
 144:	8b bb       	out	0x1b, r24	; 27
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	8a bb       	out	0x1a, r24	; 26
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <init_LCD>:
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	8a bb       	out	0x1a, r24	; 26
 156:	8a bb       	out	0x1a, r24	; 26
 158:	8b b3       	in	r24, 0x1b	; 27
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	8b bb       	out	0x1b, r24	; 27
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	8b bb       	out	0x1b, r24	; 27
 164:	8b b3       	in	r24, 0x1b	; 27
 166:	8b 7f       	andi	r24, 0xFB	; 251
 168:	8b bb       	out	0x1b, r24	; 27
 16a:	8b b3       	in	r24, 0x1b	; 27
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	8b b3       	in	r24, 0x1b	; 27
 172:	80 62       	ori	r24, 0x20	; 32
 174:	8b bb       	out	0x1b, r24	; 27
 176:	8b b3       	in	r24, 0x1b	; 27
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	d1 df       	rcall	.-94     	; 0x120 <wait_LCD>
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	b5 df       	rcall	.-150    	; 0xec <Write2Nib>
 182:	ce df       	rcall	.-100    	; 0x120 <wait_LCD>
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	8e 7f       	andi	r24, 0xFE	; 254
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	8e e0       	ldi	r24, 0x0E	; 14
 18c:	af df       	rcall	.-162    	; 0xec <Write2Nib>
 18e:	c8 df       	rcall	.-112    	; 0x120 <wait_LCD>
 190:	8b b3       	in	r24, 0x1b	; 27
 192:	8e 7f       	andi	r24, 0xFE	; 254
 194:	8b bb       	out	0x1b, r24	; 27
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	a9 df       	rcall	.-174    	; 0xec <Write2Nib>
 19a:	c2 cf       	rjmp	.-124    	; 0x120 <wait_LCD>
 19c:	08 95       	ret

0000019e <clr_LCD>:
 19e:	8b b3       	in	r24, 0x1b	; 27
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	a2 df       	rcall	.-188    	; 0xec <Write2Nib>
 1a8:	bb cf       	rjmp	.-138    	; 0x120 <wait_LCD>
 1aa:	08 95       	ret

000001ac <main>:
#include <util/delay.h>
#include "myLCD_new.h"

int main(void)
{
	DDRF = 0xFF;
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	
    /* Replace with your application code */
	init_LCD();
 1b2:	cf df       	rcall	.-98     	; 0x152 <init_LCD>
	clr_LCD();
 1b4:	f4 df       	rcall	.-24     	; 0x19e <clr_LCD>
 1b6:	e2 e6       	ldi	r30, 0x62	; 98
		/**`
		move_LCD(1,1);
		putStr_LCD("LCD Display");
		_delay_ms(500);
		**/
		PORTF = 0xFF;
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	80 83       	st	Z, r24
 1be:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	8f e7       	ldi	r24, 0x7F	; 127
 1c2:	96 e1       	ldi	r25, 0x16	; 22
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x18>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x22>
 1ce:	00 00       	nop
 1d0:	80 81       	ld	r24, Z
		_delay_ms(1000);
		PORTF &=~ 0xF0;
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	80 83       	st	Z, r24
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	8f e7       	ldi	r24, 0x7F	; 127
 1da:	96 e1       	ldi	r25, 0x16	; 22
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x30>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x3a>
 1e6:	00 00       	nop
 1e8:	e6 cf       	rjmp	.-52     	; 0x1b6 <main+0xa>

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
